// Code generated by protoc-gen-go. DO NOT EDIT.
// source: web_app_service.proto

package services // import "api-server/generated/services"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import messages "api-server/generated/messages"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WebAppServiceClient is the client API for WebAppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WebAppServiceClient interface {
	Auth(ctx context.Context, in *messages.AuthRequest, opts ...grpc.CallOption) (*messages.AuthResponse, error)
	SignIn(ctx context.Context, in *messages.SignInRequest, opts ...grpc.CallOption) (*messages.AuthResponse, error)
	SignUp(ctx context.Context, in *messages.SignUpRequest, opts ...grpc.CallOption) (*messages.AuthResponse, error)
	SignOut(ctx context.Context, in *messages.SignOutRequest, opts ...grpc.CallOption) (*messages.AuthResponse, error)
	User(ctx context.Context, in *messages.UserRequest, opts ...grpc.CallOption) (*messages.UserResponse, error)
	Stores(ctx context.Context, in *messages.StoresRequest, opts ...grpc.CallOption) (*messages.StoresResponse, error)
	Store(ctx context.Context, in *messages.StoreRequest, opts ...grpc.CallOption) (*messages.StoreResponse, error)
	Product(ctx context.Context, in *messages.ProductRequest, opts ...grpc.CallOption) (*messages.ProductResponse, error)
	ClearingHistory(ctx context.Context, in *messages.ClearingHistoryRequest, opts ...grpc.CallOption) (*messages.ClearingHistoryResponse, error)
}

type webAppServiceClient struct {
	cc *grpc.ClientConn
}

func NewWebAppServiceClient(cc *grpc.ClientConn) WebAppServiceClient {
	return &webAppServiceClient{cc}
}

func (c *webAppServiceClient) Auth(ctx context.Context, in *messages.AuthRequest, opts ...grpc.CallOption) (*messages.AuthResponse, error) {
	out := new(messages.AuthResponse)
	err := c.cc.Invoke(ctx, "/services.WebAppService/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webAppServiceClient) SignIn(ctx context.Context, in *messages.SignInRequest, opts ...grpc.CallOption) (*messages.AuthResponse, error) {
	out := new(messages.AuthResponse)
	err := c.cc.Invoke(ctx, "/services.WebAppService/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webAppServiceClient) SignUp(ctx context.Context, in *messages.SignUpRequest, opts ...grpc.CallOption) (*messages.AuthResponse, error) {
	out := new(messages.AuthResponse)
	err := c.cc.Invoke(ctx, "/services.WebAppService/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webAppServiceClient) SignOut(ctx context.Context, in *messages.SignOutRequest, opts ...grpc.CallOption) (*messages.AuthResponse, error) {
	out := new(messages.AuthResponse)
	err := c.cc.Invoke(ctx, "/services.WebAppService/SignOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webAppServiceClient) User(ctx context.Context, in *messages.UserRequest, opts ...grpc.CallOption) (*messages.UserResponse, error) {
	out := new(messages.UserResponse)
	err := c.cc.Invoke(ctx, "/services.WebAppService/User", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webAppServiceClient) Stores(ctx context.Context, in *messages.StoresRequest, opts ...grpc.CallOption) (*messages.StoresResponse, error) {
	out := new(messages.StoresResponse)
	err := c.cc.Invoke(ctx, "/services.WebAppService/Stores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webAppServiceClient) Store(ctx context.Context, in *messages.StoreRequest, opts ...grpc.CallOption) (*messages.StoreResponse, error) {
	out := new(messages.StoreResponse)
	err := c.cc.Invoke(ctx, "/services.WebAppService/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webAppServiceClient) Product(ctx context.Context, in *messages.ProductRequest, opts ...grpc.CallOption) (*messages.ProductResponse, error) {
	out := new(messages.ProductResponse)
	err := c.cc.Invoke(ctx, "/services.WebAppService/Product", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webAppServiceClient) ClearingHistory(ctx context.Context, in *messages.ClearingHistoryRequest, opts ...grpc.CallOption) (*messages.ClearingHistoryResponse, error) {
	out := new(messages.ClearingHistoryResponse)
	err := c.cc.Invoke(ctx, "/services.WebAppService/ClearingHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebAppServiceServer is the server API for WebAppService service.
type WebAppServiceServer interface {
	Auth(context.Context, *messages.AuthRequest) (*messages.AuthResponse, error)
	SignIn(context.Context, *messages.SignInRequest) (*messages.AuthResponse, error)
	SignUp(context.Context, *messages.SignUpRequest) (*messages.AuthResponse, error)
	SignOut(context.Context, *messages.SignOutRequest) (*messages.AuthResponse, error)
	User(context.Context, *messages.UserRequest) (*messages.UserResponse, error)
	Stores(context.Context, *messages.StoresRequest) (*messages.StoresResponse, error)
	Store(context.Context, *messages.StoreRequest) (*messages.StoreResponse, error)
	Product(context.Context, *messages.ProductRequest) (*messages.ProductResponse, error)
	ClearingHistory(context.Context, *messages.ClearingHistoryRequest) (*messages.ClearingHistoryResponse, error)
}

func RegisterWebAppServiceServer(s *grpc.Server, srv WebAppServiceServer) {
	s.RegisterService(&_WebAppService_serviceDesc, srv)
}

func _WebAppService_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAppServiceServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.WebAppService/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAppServiceServer).Auth(ctx, req.(*messages.AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebAppService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAppServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.WebAppService/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAppServiceServer).SignIn(ctx, req.(*messages.SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebAppService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAppServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.WebAppService/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAppServiceServer).SignUp(ctx, req.(*messages.SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebAppService_SignOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.SignOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAppServiceServer).SignOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.WebAppService/SignOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAppServiceServer).SignOut(ctx, req.(*messages.SignOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebAppService_User_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAppServiceServer).User(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.WebAppService/User",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAppServiceServer).User(ctx, req.(*messages.UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebAppService_Stores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.StoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAppServiceServer).Stores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.WebAppService/Stores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAppServiceServer).Stores(ctx, req.(*messages.StoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebAppService_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAppServiceServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.WebAppService/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAppServiceServer).Store(ctx, req.(*messages.StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebAppService_Product_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAppServiceServer).Product(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.WebAppService/Product",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAppServiceServer).Product(ctx, req.(*messages.ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebAppService_ClearingHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ClearingHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebAppServiceServer).ClearingHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.WebAppService/ClearingHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebAppServiceServer).ClearingHistory(ctx, req.(*messages.ClearingHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WebAppService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.WebAppService",
	HandlerType: (*WebAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _WebAppService_Auth_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _WebAppService_SignIn_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _WebAppService_SignUp_Handler,
		},
		{
			MethodName: "SignOut",
			Handler:    _WebAppService_SignOut_Handler,
		},
		{
			MethodName: "User",
			Handler:    _WebAppService_User_Handler,
		},
		{
			MethodName: "Stores",
			Handler:    _WebAppService_Stores_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _WebAppService_Store_Handler,
		},
		{
			MethodName: "Product",
			Handler:    _WebAppService_Product_Handler,
		},
		{
			MethodName: "ClearingHistory",
			Handler:    _WebAppService_ClearingHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "web_app_service.proto",
}

func init() {
	proto.RegisterFile("web_app_service.proto", fileDescriptor_web_app_service_de6dce86af2fd25f)
}

var fileDescriptor_web_app_service_de6dce86af2fd25f = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x86, 0x3d, 0xc4, 0x54, 0x16, 0x54, 0x58, 0xe8, 0x87, 0x05, 0xf1, 0xe3, 0x6e, 0x0b, 0x7a,
	0x28, 0x28, 0x82, 0xd5, 0x8b, 0x9e, 0x2a, 0x86, 0xa0, 0x78, 0x29, 0x9b, 0x76, 0x88, 0x0b, 0xba,
	0xbb, 0xce, 0xec, 0x2a, 0xfe, 0x4c, 0xff, 0x91, 0x24, 0xe9, 0xa6, 0x4d, 0x5a, 0x6c, 0x8f, 0xf3,
	0xbe, 0xcf, 0x33, 0xc9, 0xc2, 0xb0, 0xe6, 0x37, 0x24, 0x63, 0x61, 0xcc, 0x98, 0x00, 0xbf, 0xe4,
	0x04, 0x7a, 0x06, 0xb5, 0xd5, 0x7c, 0x67, 0x36, 0x52, 0x77, 0xef, 0x03, 0x88, 0x44, 0x0a, 0x54,
	0x34, 0xe7, 0xbf, 0x01, 0xdb, 0x7d, 0x86, 0x64, 0x68, 0x4c, 0x54, 0x20, 0x7c, 0xc0, 0x82, 0xa1,
	0xb3, 0x6f, 0xbc, 0xd9, 0x2b, 0xd1, 0x6c, 0x7e, 0x82, 0x4f, 0x07, 0x64, 0xbb, 0xad, 0x7a, 0x4c,
	0x46, 0x2b, 0x82, 0xd3, 0x2d, 0x7e, 0xc5, 0xc2, 0x48, 0xa6, 0xea, 0x41, 0xf1, 0xf6, 0x9c, 0x29,
	0x92, 0x8d, 0xe5, 0xd8, 0xd4, 0xe5, 0xd8, 0xac, 0x97, 0xaf, 0x59, 0x23, 0x43, 0x47, 0xce, 0xf2,
	0x4e, 0xd5, 0x1e, 0x39, 0xbb, 0x5e, 0x1f, 0xb0, 0x20, 0x26, 0xc0, 0xc5, 0x17, 0x67, 0xf3, 0x0a,
	0xb1, 0x88, 0x17, 0xbe, 0x1b, 0x46, 0x56, 0x23, 0x50, 0xe5, 0xa7, 0xf3, 0xc4, 0xcb, 0x9d, 0xe5,
	0xa2, 0xd4, 0x2f, 0xd9, 0x76, 0x9e, 0xf1, 0x56, 0x0d, 0xf2, 0x72, 0x7b, 0x29, 0x2f, 0xdd, 0x1b,
	0xd6, 0x78, 0x44, 0x3d, 0x75, 0x93, 0xca, 0x93, 0x67, 0x91, 0xf7, 0x0f, 0x56, 0x34, 0xe5, 0x86,
	0x17, 0xb6, 0x7f, 0xf7, 0x0e, 0x02, 0xa5, 0x4a, 0xef, 0x25, 0x59, 0x8d, 0x3f, 0xfc, 0x78, 0xce,
	0xd7, 0x2a, 0xbf, 0xf1, 0xe4, 0x1f, 0xc2, 0x6f, 0xbe, 0x3d, 0x7a, 0x3d, 0x14, 0x46, 0x9e, 0x65,
	0x37, 0x07, 0xd8, 0x4f, 0x41, 0x01, 0x0a, 0x0b, 0xd3, 0xbe, 0x3f, 0xc2, 0x24, 0xcc, 0x6f, 0xef,
	0xe2, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x63, 0xcd, 0x66, 0x77, 0xae, 0x02, 0x00, 0x00,
}
